[[_perforce_import]]
==== Perforce

(((Perforce)))(((Importing, from Perforce)))
Następnym systemem, któremu się przyjrzymy z perspektywy importu, jest Perforce.
Jak wspomnieliśmy powyżej, istnieją dwa sposoby, aby Git i Perforce mogły ze sobą rozmawiać: git-p4 oraz Perforce Git Fusion.

===== Perforce Git Fusion

Git Fusion czyni ten proces dość bezbolesnym.
Wystarczy za pomocą pliku konfiguracyjnego skonfigurować ustawienia projektu, mapowania użytkowników i gałęzie (tak jak omówiono w <<_p4_git_fusion>>), a następnie sklonować repozytorium.
Git Fusion w wyniku daje Ci coś, co wygląda jak natywne repozytorium Git, które jest gotowe do wysłania do natywnego hosta Git.
Możesz nawet użyć Perforce jako swojego hosta Git.

[[_git_p4]]
===== Git-p4

Git-p4 może również działać jako narzędzie do importowania.
Jako przykład, zaimportujemy projekt Jam z Perforce Public Depot.
Aby skonfigurować swojego klienta, musisz wyeksportować zmienną środowiskową P4PORT, aby wskazywała na magazyn Perforce:

[source,console]
----
$ export P4PORT=public.perforce.com:1666
----

[NOTE]
====
Aby móc kontynuować, będziesz potrzebował magazynu Perforce, z którym będziesz mógł się połączyć.
Do naszych przykładów użyjemy publicznego magazynu pod adresem public.perforce.com, ale możesz użyć dowolnego magazynu, do którego masz dostęp.
====

(((git commands, p4)))
Uruchom komendę `git-p4 clone`, aby zaimportować projekt Jam z serwera Perforce wskazując magazyn i ścieżkę projektu, oraz katalog do którego chcesz go zaimportować:

[source,console]
----
$ git-p4 clone //guest/perforce_software/jam@all p4import
Importing from //guest/perforce_software/jam@all into p4import
Initialized empty Git repository in /private/tmp/p4import/.git/
Import destination: refs/remotes/p4/master
Importing revision 9957 (100%)
----

Ten konkretny projekt ma tylko jedną gałąź, ale jeśli masz gałęzie, które są skonfigurowane z widokami gałęzi (lub po prostu zestawem katalogów), możesz użyć flagi `--detect-branches` do `git p4 clone` aby zaimportować wszystkie gałęzie projektu.
Zajrzyj do <<_git_p4_branches>> aby uzyskać więcej szczegółów na ten temat.

W tym momencie prawie zakończyłeś już pracę.
Jeśli przejdziesz do katalogu `p4import` i uruchomisz `git log`, możesz zobaczyć zaimportowane dane:

[source,console]
----
$ git log -2
commit e5da1c909e5db3036475419f6379f2c73710c4e6
Author: giles <giles@giles@perforce.com>
Date:   Wed Feb 8 03:13:27 2012 -0800

    Correction to line 355; change </UL> to </OL>.

    [git-p4: depot-paths = "//public/jam/src/": change = 8068]

commit aa21359a0a135dda85c50a7f7cf249e4f7b8fd98
Author: kwirth <kwirth@perforce.com>
Date:   Tue Jul 7 01:35:51 2009 -0800

    Fix spelling error on Jam doc page (cummulative -> cumulative).

    [git-p4: depot-paths = "//public/jam/src/": change = 7304]
----

Możesz zauważyć, że każdy commit posiada identyfikator `git-p4`.
Może on zostać, w razie gdybyś potrzebował dotrzeć do informacji o numerze zmiany zapisanym w Perforce.
Jednak, gdybyś chciał usunąć ten identyfikator, teraz jest dobry moment aby to zrobić – przed wprowadzeniem jakichkolwiek zmian w nowym repozytorium.
(((git commands, filter-branch)))
Możesz użyć `git filter-branch` aby usunąć wszystkie identyfikatory:

[source,console]
----
$ git filter-branch --msg-filter 'sed -e "/^\[git-p4:/d"'
Rewrite e5da1c909e5db3036475419f6379f2c73710c4e6 (125/125)
Ref 'refs/heads/master' was rewritten
----

Jeżeli uruchomisz `git log`, zobaczysz że wszystkie sumy SHA-1 dla commitów zostały zmienione i nie ma już identyfikatorów pozostawionych przez `git-p4` w treściach komentarzy:

[source,console]
----
$ git log -2
commit b17341801ed838d97f7800a54a6f9b95750839b7
Author: giles <giles@giles@perforce.com>
Date:   Wed Feb 8 03:13:27 2012 -0800

    Correction to line 355; change </UL> to </OL>.

commit 3e68c2e26cd89cb983eb52c024ecdfba1d6b3fff
Author: kwirth <kwirth@perforce.com>
Date:   Tue Jul 7 01:35:51 2009 -0800

    Fix spelling error on Jam doc page (cummulative -> cumulative).
----

Twój kod jest teraz gotowy do wypchnięcia na nowy serwer Gita.
