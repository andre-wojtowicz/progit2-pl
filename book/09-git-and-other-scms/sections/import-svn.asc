==== Subversion

(((Subversion)))
(((Importing, from Subversion)))
Jeżeli przeczytałeś poprzednią sekcję na temat używania `git svn`, możesz z łatwością użyć tamtych instrukcji aby sklonować za pomocą `git svn clone` repozytorium; następnie, przestań używać serwera Subversion, wypchaj zmiany do serwera Git i zacznij tylko na nim współpracować.
Jeżeli potrzebujesz historii projektu, będziesz mógł to osiągnąć tak szybko, jak tylko możesz ściągnąć dana z serwera Subversion (co może chwilę zająć).

Niemniej, importowanie nie jest idealnym rozwiązaniem; a dlatego że zajmie to dużo czasu, powinieneś zrobić to raz a dobrze.
Pierwszym problemem są informacje o autorze.
W Subversion, każda osoba wgrywająca zmiany posiada konto systemowe na serwerze który zapisuje zmiany.
Przykłady w poprzedniej sekcji, pokazują użytkownika `schacon` w kilku miejscach, takich jak wynik komendy `blame` czy `git svn log`.
Jeżeli chciałbyś zamienić je na dane zgodne z Gitem, musisz stworzyć mapowania z użytkownika Subversion na autora w Git.
Stwórz plik `users.txt`, który ma przypisane adresy w ten sposób:

[source]
----
schacon = Scott Chacon <schacon@geemail.com>
selse = Someo Nelse <selse@geemail.com>
----

Aby otrzymać listę autorów używanych przez SVN, uruchom komendę:

[source,console]
----
$ svn log --xml | grep author | sort -u | \
  perl -pe 's/.*>(.*?)<.*/$1 = /'
----

Generuje to wyjście dziennika w formacie XML, następnie zachowuje tylko linie z informacjami o autorze, odrzuca duplikaty i usuwa znaczniki XML.
(Oczywiście działa to tylko na maszynie z zainstalowanymi programami `grep`, `sort` i `perl`).
Następnie przekieruj wynik komendy do pliku users.txt, tak abyś mógł dodać odpowiednik użytkownika w Gitcie dla każdego wpisu.

Możesz przekazać ten plik do komendy `git svn`, aby pomóc jej lepiej zmapować dane przypisane do autorów.
Możesz również wskazać `git svn`, aby nie zaciągał meta-danych, które normalnie Subversion importuje, poprzez dodanie opcji `--no-metadata` do komend `clone` lub `init`.
Twoja komenda `import` wygląda więc tak:

[source,console]
----
$ git svn clone http://my-project.googlecode.com/svn/ \
      --authors-file=users.txt --no-metadata -s my_project
----

Teraz powinieneś mieć lepiej wyglądający projekt z Subversion w swoim katalogu `my_project`.
Zamiast commitów, które wyglądają tak te:

[source]
----
commit 37efa680e8473b615de980fa935944215428a35a
Author: schacon <schacon@4c93b258-373f-11de-be05-5f7a86268029>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk

    git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de-
    be05-5f7a86268029
----

masz takie:

[source]
----
commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2
Author: Scott Chacon <schacon@geemail.com>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk
----

Nie tylko dane dotyczące autora ("Author") wyglądają lepiej, ale nie ma również znaczników `git-svn-id`.

Musisz jeszcze trochę posprzątać po imporcie.
Na początek, powinieneś poprawić dziwne referencje które ustawił `git svn`.
Najpierw przeniesiesz tagi, tak aby były normalnymi tagami, zamiast dziwnych zdalnych gałęzi, następnie przeniesiesz resztę gałęzi tak aby były lokalne.

Aby przenieść etykiety i zrobić z nich prawidłowe tagi Gita, uruchom:

[source,console]
----
$ cp -Rf .git/refs/remotes/origin/tags/* .git/refs/tags/
$ rm -Rf .git/refs/remotes/origin/tags
----

Pobierze to referencje które były zdalnymi gałęziami rozpoczynającymi się od `remotes/origin/tags/` i zrobi z nich normalne (lekkie) etykiety.

Następnie, przenieś resztę referencji z `refs/remotes`, tak aby stały się lokalnymi gałęziami:

[source,console]
----
$ cp -Rf .git/refs/remotes/* .git/refs/heads/
$ rm -Rf .git/refs/remotes
----

Teraz wszystkie stare gałęzie są prawdziwymi gałęziami Gita, a stare tagi prawdziwymi tagami w Git.
Ostatnią rzeczą do zrobienia jest dodanie nowego serwera Git jako zdalnego i wypchnięcie danych do niego.
Poniżej znajduje się przykład dodania Twojego serwera jako zdalnego:

[source,console]
----
$ git remote add origin git@my-git-server:myrepository.git
----

Ponieważ chcesz aby wszystkie gałęzie i etykiety były na repozytorium, możesz uruchomić:

[source,console]
----
$ git push origin --all
----

Wszystkie gałęzie i tagi powinny być już na Twoim serwerze Gita, zaimportowane w czysty i zgrabny sposób.
